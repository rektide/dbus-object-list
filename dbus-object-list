"use strict"

let materialize= require( "./materialize")

function DbusObjectList( name, target, opts){
	opts= opts|| {}
	let
	  origInterface= opts.interface,
	  origType= opts.type
	if( name instanceof Function){ // process type early. after backing up (we stomp opts)!
		opts.type= name
		name= name.name
	}
	if( opts.type&& opts.type.interface){
		opts.interface= opts.type.interface
	}

	let
	  emit= opts.emit,
	  // generate some name variants. Ex: PulseAudio "card"
	  first= name.slice( 0, 1),
	  rest= name.slice( 1),
	  lower= first.toLowerCase(),
	  lowerName= emit&& first== lower? name: [lower, rest].join( ""),
	  cap= first.toUpperCase(),
	  targetSlot= opts.targetSlot|| [ cap, rest, name.plural|| "s"].join( ""), // ex; card-> Cards
	  newObj= [ "New", cap, rest].join( ""), // card-> NewCard
	  removedObj= [ cap, rest, "Removed"].join( ""), // card-> CardRemoved
	  eventTarget= opts.eventTarget&& opts.eventTarget=== true? target: opts.eventTarget,
	  baseInterface= opts.baseInterface // org.PulseAudio.Core1
	if( baseInterface){
		opts.interface= [baseInterface, ".", cap, rest].join( "") // card=> org.PulseAudio.Core1.Card
	}
	let
	  materializer= opts.interface? materialize( opts): null, // build a materializer, if we have an interface to materialize
	  value= materializer? {}: [],
	  done
	opts.interface= origInterface
	opts.type= origType
	// bound below: materializer, value, emit, targetSlot, lowerName
	if(materializer){
		done = Promise.all( [target, eventTarget]).then( targets=>{
			let
			  target= targets[ 0],
			  eventTarget= targets[ 1]
			return new Promise(( resolve, reject)=> {
				eventTarget&& eventTarget.on( newObj, newPath=>{ // subscribe to new
					materializer( newPath).then( materialized=> {
						value[ newPath]= materialized
						if( emit){
							emit( lowerName, materialized, newPath, lowerName)
				} }) })
				eventTarget&& eventTarget.on( removedObj, removedPath=>{ // subscribe to remove
					delete value[ removedPath]
					if( emit){
						emit( lowerName, null, removedObj, lowerName)
				} })
				target[ targetSlot](( err, initial)=>{ // retrieve initial value
					if( err) return reject( err)
					let all= initial.map( materializer)
					Promise.all( all).then(function( all){
						for(var i in initial){
							let path= initial[ i]
							value[ path]= all[ i]
						}
						resolve( value)
					}, reject)
	}) }) }) }else{
		done = Promise.all([ target, eventTarget]).then( targets=>{
			let
			  target= targets[ 0],
			  eventTarget= targets[ 1]
			return new Promise(( resolve, reject)=> {
				eventTarget&& eventTarget.on( newObj, newPath=>{ // subscribe to new
					value.push( newPath)
					if( emit){
						emit( lowerName, newPath, newPath, lowerName)
					}
				})
				eventTarget&& eventTarget.on( removedObj, removePath=>{ // subscribe to remove
					let i= value.indexOf( removePath)
					if( i === -1){
						return
					}
					value.splice( i, 1)
					if( emit){
						emit( lowerName, null, removePath, lowerName)
					}
				})
				target[ targetSlot](( err, initial)=>{ // retrieve initial value
					if( err) return reject( err)
					value.push.apply( value, initial) // append
					resolve( value)
				})
			})
		  })
	}
	return {value, done}
}



module.exports= DbusObjectList
