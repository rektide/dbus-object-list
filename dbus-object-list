"use strict"

let materialize= require( "./materialize")

function DbusObjectList( baseName, target, opts){
	opts= opts|| {}
	let
	  first= baseName.slice( 0, 1),
	  cap= first.toUpperCase(),
	  rest= baseName.slice( 1)
	if( opts.baseInterface){
		opts.interface= [opts.baseInterface, ".", cap, rest].join("")
	}
	let
	  newObj= ["New", cap, rest].join(""),
	  removedObj= ["Removed", cap, rest].join(""),
	  plural= [rest, baseName.plural? baseName.plural: "s"].join(""),
	  capPlural= [cap, plural].join(""),
	  materializer= opts.interface? materialize(opts): null,
	  emit= opts.emit,
	  value= materializer? {}: [],
	  done
	if(materializer){
		done = Promise.resolve( target).then( target=>{
			return new Promise(( resolve, reject)=> {
				target.on( newObj, newPath=>{ // subscribe to new
					materializer( newPath).then( materialized=> {
						value[ newPath]= materialized
						if( emit){
							emit( baseName, materialized, newPath)
				} }) })
				target.on( removedObj, removePath=>{ // subscribe to remove
					delete value[ removePath]
					if( emit){
						emit( baseName, null, removeObj)
				} })
				target[ capPlural](( err, initial)=>{ // retrieve initial value
					if( err) return reject( err)
					let all= initial.map( materializer)
					Promise.all( all).then(function( all){
						for(var i in initial){
							let path= initial[ i]
							value[ path]= all[ i]
						}
						resolve(value)
					}, reject)
	}) }) }) }else{
		done = Promise.resolve( target).then( target=>{
			return new Promise(( resolve, reject)=> {
				target[ capPlural](( err, initial)=>{ // retrieve initial value
					if( err) return reject( err)
					value.push.apply( value, initial) // append
					resolve( value)
				})
				target.on( newObj, newPath=>{ // subscribe to new
					value.push( newPath)
					if( emit){
						emit( baseName, newPath, newPath)
					}
				})
				target.on( removedObj, removePath=>{ // subscribe to remove
					let i= value.indexOf( removePath)
					if( i === -1){
						return
					}
					value.splice( i, 1)
					if( emit){
						emit( baseName, null, removePath)
					}
				})
			})
		  })
	}
	return {value, done}
}



module.exports= DbusObjectList
